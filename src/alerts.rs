use linkme::distributed_slice;

const WINDOWS: &[&str] = &["5m", "30m", "1h", "2h", "6h", "1d", "3d", "30d"];

pub struct Alert {
    pub function: &'static str,
    pub module: &'static str,
    pub success_rate: Option<&'static str>,
    pub latency_target: Option<&'static str>,
    pub latency_percentile: Option<&'static str>,
}

#[distributed_slice]
pub static METRICS: [Alert] = [..];

pub fn generate_alerts() -> String {
    let recording_rules = METRICS
        .iter()
        .flat_map(|alert| {
            WINDOWS
                .iter()
                .map(|window| error_ratio_recording_rule(alert.function, alert.module, window))
        })
        .collect::<Vec<_>>()
        .join("");

    format!(
        "# Prometheus recording and alerting rules generated by autometrics-rs

groups:
- name: autometrics-alert-recordings
  rules:{recording_rules}"
    )
}

fn request_rate_query(function: &str, module: &str, window: &str) -> String {
    format!(
        "sum(rate(function_calls_count{{function=\"{function}\",module=\"{module}\"}}[{window}]))"
    )
}

fn error_rate_query(function: &str, module: &str, window: &str) -> String {
    format!(
        "sum(rate(function_calls_count{{function=\"{function}\",module=\"{module}\",result=\"error\"}}[{window}]))"
    )
}

fn success_rate_query(function: &str, module: &str, window: &str) -> String {
    let request_rate = request_rate_query(function, module, window);
    let error_rate = error_rate_query(function, module, window);
    format!("1 - {error_rate} / {request_rate}")
}

fn error_ratio_recording_rule(function: &str, module: &str, window: &str) -> String {
    let expr = success_rate_query(function, module, window);

    format!(
        "
  - record: slo:sli_error:ratio_rate{window}
    expr: {expr}
    labels:
      function: {function}
      module: {module}
      window: {window}"
    )
}

// fn latency_query(function: &str, module: &str, window: &str) -> String {
// let latency = format!(
// "sum by (le, function, module) (rate({bucket_name}{{{label_key}=\"{label_value}\"}}[5m]))"
// );
// format!(
// "histogram_quantile(0.99, {latency}) or
// histogram_quantile(0.95, {latency})"
// )
// }

// fn concurrent_calls_query(gauge_name: &str, label_key: &str, label_value: &str) -> String {
// format!("sum by (function, module) {gauge_name}{{{label_key}=\"{label_value}\"}}")
// }
