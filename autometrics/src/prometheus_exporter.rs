//! Helper functions for easily collecting and exporting metrics to Prometheus.
//!
//! This module is compatible with any of the metrics backends. It uses
//! the `prometheus-client` by default if you do not specifically enable another backend.
//!
//! You do not need this module if you are already collecting custom metrics and exporting them to Prometheus.
//!
//! # Example
//! ```rust
//! use autometrics::prometheus_exporter::{self, PrometheusResponse};
//!
//! /// Exports metrics to Prometheus.
//! /// This should be mounted on `/metrics` on your API server
//! pub async fn get_metrics() -> PrometheusResponse {
//!     prometheus_exporter::encode_http_response()
//! }
//!
//! pub fn main() {
//!     prometheus_exporter::init();
//! }
//! ```

use http::{header::CONTENT_TYPE, Response};
#[cfg(metrics)]
use metrics_exporter_prometheus::{PrometheusBuilder, PrometheusHandle};
use once_cell::sync::Lazy;
#[cfg(opentelemetry)]
use opentelemetry_prometheus::{exporter, PrometheusExporter};
#[cfg(opentelemetry)]
use opentelemetry_sdk::export::metrics::aggregation;
#[cfg(opentelemetry)]
use opentelemetry_sdk::metrics::{controllers, processors, selectors};
#[cfg(any(opentelemetry, prometheus))]
use prometheus::TextEncoder;
use thiserror::Error;

#[cfg(not(exemplars))]
/// Prometheus text format content type
const RESPONSE_CONTENT_TYPE: &str = "text/plain; version=0.0.4";
#[cfg(exemplars)]
/// OpenMetrics content type
const RESPONSE_CONTENT_TYPE: &str = "application/openmetrics-text; version=1.0.0; charset=utf-8";

pub type PrometheusResponse = Response<String>;

#[derive(Debug, Error)]
pub enum EncodingError {
    #[cfg(any(prometheus, opentelemetry))]
    #[error(transparent)]
    Prometheus(#[from] prometheus::Error),
    #[cfg(prometheus_client)]
    #[error(transparent)]
    Format(#[from] std::fmt::Error),
}

pub(crate) static GLOBAL_EXPORTER: Lazy<GlobalPrometheus> = Lazy::new(|| GlobalPrometheus {
    #[cfg(metrics)]
    metrics_exporter: PrometheusBuilder::new()
        .set_buckets(&crate::HISTOGRAM_BUCKETS)
        .expect("Failed to set histogram buckets")
        .install_recorder()
        .expect("Failed to install recorder"),

    #[cfg(opentelemetry)]
    opentelemetry_exporter: exporter(
        controllers::basic(processors::factory(
            selectors::simple::histogram(crate::HISTOGRAM_BUCKETS),
            aggregation::cumulative_temporality_selector(),
        ))
        .build(),
    )
    .init(),
});

#[derive(Clone)]
#[doc(hidden)]
pub struct GlobalPrometheus {
    #[cfg(opentelemetry)]
    opentelemetry_exporter: PrometheusExporter,
    #[cfg(metrics)]
    metrics_exporter: PrometheusHandle,
}

impl GlobalPrometheus {
    fn encode_metrics(&self) -> Result<String, EncodingError> {
        let mut output = String::new();

        #[cfg(metrics)]
        {
            output.push_str(&self.metrics_exporter.render());
            output.push('\n');
        }

        #[cfg(opentelemetry)]
        {
            let metric_families = self.opentelemetry_exporter.registry().gather();
            let encoder = TextEncoder::new();
            encoder.encode_utf8(&metric_families, &mut output)?;
            output.push('\n');
        }

        #[cfg(prometheus)]
        {
            let metric_families = prometheus::default_registry().gather();
            let encoder = TextEncoder::new();
            encoder.encode_utf8(&metric_families, &mut output)?;
            output.push('\n');
        }

        #[cfg(prometheus_client)]
        {
            prometheus_client::encoding::text::encode(
                &mut output,
                &crate::tracker::prometheus_client::REGISTRY,
            )?;
        }

        Ok(output)
    }
}

/// Initialize the global Prometheus metrics collector and exporter.
///
/// You will need a collector/exporter set up in order to use the metrics
/// generated by autometrics. You can either use this one or configure
/// your own following the example from the
/// [`opentelemetry_prometheus`](https://docs.rs/opentelemetry-prometheus/latest/opentelemetry_prometheus/)
/// crate documentation.
///
/// This should be included in your `main.rs`:
/// ```
/// # fn main() {
/// # #[cfg(feature="prometheus-exporter")]
///     autometrics::prometheus_exporter::init();
/// # }
/// ```
pub fn init() {
    // This will cause the Lazy to be initialized
    let _ = GLOBAL_EXPORTER.clone();
}

/// Export the collected metrics to the Prometheus format.
///
/// Create a handler on your API (often, this would be the
/// handler for the route `/metrics`) that returns the result of this function.
///
/// For example, using Axum, you might have a handler:
/// ```rust
/// # use http::StatusCode;
/// // Mounted at the route `/metrics`
/// pub async fn metrics_get() -> (StatusCode, String) {
///   match autometrics::prometheus_exporter::encode_to_string() {
///     Ok(metrics) => (StatusCode::OK, metrics),
///     Err(err) => (StatusCode::INTERNAL_SERVER_ERROR, format!("{:?}", err))
///   }
/// }
/// ```
pub fn encode_to_string() -> Result<String, EncodingError> {
    GLOBAL_EXPORTER.encode_metrics()
}

/// Export the collected metrics to the Prometheus or OpenMetrics format and wrap
/// them in an HTTP response.
///
/// If you are using exemplars, this will automatically use the OpenMetrics
/// content type so that Prometheus can scrape the metrics and exemplars.
pub fn encode_http_response() -> PrometheusResponse {
    match encode_to_string() {
        Ok(metrics) => http::Response::builder()
            .status(200)
            .header(CONTENT_TYPE, RESPONSE_CONTENT_TYPE)
            .body(metrics)
            .expect("Error building response"),
        Err(err) => http::Response::builder()
            .status(500)
            .body(format!("{:?}", err))
            .expect("Error building response"),
    }
}
